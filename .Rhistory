devtools::document()
packageVersion("dplyr")
packageVersion("ggplot2")
devtools::document()
devtools::document()
devtools::install()
library(rSCL)
scl_color_warm()
box_colors()
remove.packages("rSCL")
devtools::document()
devtools::install()
scl_color_warm()
library(tidyverse)
library(data.table)
library(magrittr)
library(lubridate)
library(timeDate)
library(zoo)
library(earth)
library(caret)
library(leaps)
library(MASS)
library(pracma)
devtools::document()
library(tidyverse)
library(data.table)
library(lubridate)
library(dplyr)
library(timeDate)
library(extrafont)
library(descr)
library(scales)
library(readr)
library(odbc)
library(DBI)
library(keyring)
library(kableExtra)
source("I:/FINANCE/FPU/Mike/_Code Library/handy_functions.R")
source("C:/AMI Pilot PDF Report Code/Pull Residential AMI Data.R")
source("C:/AMI Pilot PDF Report Code/Flag And Remove Suspect Data.R")
source("C:/AMI Pilot PDF Report Code/MDM Interpolation And Adjustment.R")
source("C:/AMI Pilot PDF Report Code/Read and Write TOD Pilot Data.R")
source("C:/AMI Pilot PDF Report Code/Billing Calculations.R")
source("C:/AMI Pilot PDF Report Code/Get MDM KWH data for specific meters.R")
source('I:/FINANCE/FPU/AMI Pilots/Residential Time of Day/Scripts/Get CCB billing data.R')
source('C:/AMI Pilot PDF Report Code/AMI Report Generator.R')
# Select billing group here
grp <- "C"
mtd_id <- get_billing_grp_ids(group = grp)
# pulling billing info for subset of participants
billingInfo <- pull_CCB_billing_info(START_DT = start, meterIDs = mtd_id, group = grp)
start <- "2019-06-01 00:00:00"
end <- "2019-12-31 23:00:00"
# pulling billing info for subset of participants
billingInfo <- pull_CCB_billing_info(START_DT = start, meterIDs = mtd_id, group = grp)
# pulling subset of participants data
subsetPrelimDat <- pull_Customer_ami_data(customers = billingInfo)
subsetPrelimDat <- subsetPrelimDat %>%
filter(INITIAL_UPLOAD_DATE>=ymd_hms('2020-07-10 17:29:54'))
# making billing adjustments
subsetMonthlyFinalDat <- billing_adjustment(dat = subsetPrelimDat, billInfo = billingInfo)
# calculate Bill amounts
billingInfo <- calculate_tod_bill(dat = subsetMonthlyFinalDat, billInfo = billingInfo)
View(subsetPrelimDat)
View(subsetMonthlyFinalDat)
# writing billing adjustment to IT database
# make sure to add back up database code
write_billing_adjustment(dat = subsetMonthlyFinalDat)
dat = subsetMonthlyFinalDat
View(write_billing_adjustment)
# checking SQL TOD server
con <<- dbConnect(odbc(),
Driver = "SQL Server",
Server = "COSWINDE516D1",
Database = "TimeOfDayRate",
UID = "RatePilotUser",
PWD = keyring::key_get("SQL_TOD_RES", username = "RatePilotUser", keyring = "MH"),
Port = 1433)
# lock keyring
keyring_lock(keyring="MH")
# reducing data.frame to just the needed columns
keep <- c('MTD_METER_ID','DATETIME','CCB_ADJ_KWH','HOURLY_COST')
dat <- dat[keep]
# changing name to match database
dat <- dat %>% rename(FINAL_KWH = CCB_ADJ_KWH)
# creating timestamp
dat <- dat %>% mutate(CCB_CORRECTION_DATE = Sys.time())
# deleting everything from temp table
dbSendQuery(con, "DELETE FROM MeterReadTemp")
# writing updated data to temp
dbWriteTable(con, "MeterReadTemp", value=dat, append=T, overwrite=F)
# updating customer data with ccb correction
dbSendQuery(con,
"UPDATE
dbo.MeterRead
SET
FINAL_KWH = coalesce(temp.FINAL_KWH, mr.FINAL_KWH),
HOURLY_COST = coalesce(temp.HOURLY_COST, mr.HOURLY_COST)
CCB_CORRECTION_DATE= coalesce(temp.CCB_CORRECTION_DATE, mr.CCB_CORRECTION_DATE)
FROM
dbo.MeterRead mr
INNER JOIN
(SELECT *
FROM dbo.MeterReadTemp
) temp
ON
mr.MTD_METER_ID = temp.MTD_METER_ID
AND mr.DATETIME = temp.DATETIME;"
)
# updating customer data with ccb correction
dbSendQuery(con,
"UPDATE
dbo.MeterRead
SET
FINAL_KWH = coalesce(temp.FINAL_KWH, mr.FINAL_KWH),
HOURLY_COST = coalesce(temp.HOURLY_COST, mr.HOURLY_COST),
CCB_CORRECTION_DATE= coalesce(temp.CCB_CORRECTION_DATE, mr.CCB_CORRECTION_DATE)
FROM
dbo.MeterRead mr
INNER JOIN
(SELECT *
FROM dbo.MeterReadTemp
) temp
ON
mr.MTD_METER_ID = temp.MTD_METER_ID
AND mr.DATETIME = temp.DATETIME;"
)
# pulling all AMI data
data <- dbReadTable(con, "MeterRead")
View(data)
data <- data %>% filter(MTD_METER_ID=='2165997_214254')
View(data)
# deleting everything from temp table
dbSendQuery(con, "DELETE FROM MeterRead")
source("I:/FINANCE/FPU/Mike/_Code Library/handy_functions.R")
source("C:/AMI Pilot PDF Report Code/Pull Residential AMI Data.R")
source("C:/AMI Pilot PDF Report Code/Flag And Remove Suspect Data.R")
source("C:/AMI Pilot PDF Report Code/MDM Interpolation And Adjustment.R")
source("C:/AMI Pilot PDF Report Code/Read and Write TOD Pilot Data.R")
source("C:/AMI Pilot PDF Report Code/Billing Calculations.R")
source("C:/AMI Pilot PDF Report Code/Get MDM KWH data for specific meters.R")
source('I:/FINANCE/FPU/AMI Pilots/Residential Time of Day/Scripts/Get CCB billing data.R')
source('C:/AMI Pilot PDF Report Code/AMI Report Generator.R')
start <- "2019-06-01 00:00:00"
end <- "2019-12-31 23:00:00"
# pulling hourly AMI Data and filling in missing datetimes
weeklyPrelimDat <- pull_residential_ami_data(path = "I:/FINANCE/FPU/AMI Data/Processed/RS/xdat_15.csv",
completeDateRange = c(start,end))
mtd_id <- c("2172019_126331", "2165273_100591", "2170874_126934",
"2177513_255685", "2175512_2074230", "2165997_214254")
weeklyPrelimDat <- weeklyPrelimDat %>%
filter(MTD_METER_ID %in% mtd_id )
# flagging and removing suspect data
report_1 <- remove_suspect_data(dat = weeklyPrelimDat)
weeklyPrelimDat <- report_1[[1]]
coverage_report <- report_1[[2]]
suspect_report <- report_1[[3]]
# Interpolating and adjusting to match MDM values
weeklyPrelimDat_postMDM <- match_mdm_daily_reads(dat = weeklyPrelimDat)
# ---------------- STOP TO CHECK PERCENT ADJUSTMENT ----------------------
weeklyPrelimDat_postMDM %>%
group_by(MTD_METER_ID)%>%
summarise(AVERAGE_PERCENT_ADJUSTMENT=first(AVERAGE_PERCENT_ADJUSTMENT)) %>%
ggplot()+
geom_histogram(mapping=aes(x=AVERAGE_PERCENT_ADJUSTMENT), binwidth = .001)
write_new_tod_data(weeklyPrelimDat_postMDM)
# Select billing group here
grp <- "C"
mtd_id <- get_billing_grp_ids(group = grp)
# pulling billing info for subset of participants
billingInfo <- pull_CCB_billing_info(START_DT = start, meterIDs = mtd_id, group = grp)
# pulling subset of participants data
subsetPrelimDat <- pull_Customer_ami_data(customers = billingInfo)
View(subsetPrelimDat)
# making billing adjustments
subsetMonthlyFinalDat <- billing_adjustment(dat = subsetPrelimDat, billInfo = billingInfo)
# calculate Bill amounts
billingInfo <- calculate_tod_bill(dat = subsetMonthlyFinalDat, billInfo = billingInfo)
# writing billing adjustment to IT database
# make sure to add back up database code
write_billing_adjustment(dat = subsetMonthlyFinalDat)
devtools::document()
devtools::install_github("matthewhamlin/rSCL")
library(rSCL)
getWeatherData('2019-01-01','2019-01-07')
library(tidyverse)
library(data.table)
library(lubridate)
library(dplyr)
library(timeDate)
library(extrafont)
library(descr)
library(scales)
library(readr)
library(readxl)
getWeatherData('2019-01-01','2019-01-07')
#' @export
getWeatherData <- function(date1,date2, station_id = "727930-24233",Interp = FALSE){
years <- seq(year(as.Date(date1)),year(as.Date(date2)))
dFile <- "Weather.gz"
weatherData <- data.frame()
for(year in years){
url <- paste0("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-lite/",
as.character(year), '/', station_id, '-', as.character(year), '.gz')
download.file(url = url,destfile = dFile)
gz <- gzfile(dFile, open = "rt")
x <- readLines(gz)
#close(dFile)
tempTable <- read.table(text=x,col.names=c('Year','Month','Day','Hour','Temperature',
'Dew_Point_Temperature','Sea_Level_Pressure',
'Wind_Direction','Wind_Speed','Cloud_Coverage',
'Precipitation_Depth_1Hr','Precipitation_Depth_6Hr'))
tempTable <- tempTable %>%
mutate(datetime = make_datetime(year = tempTable$Year,
month = tempTable$Month,
day = tempTable$Day,
hour = tempTable$Hour))
setDT(tempTable)
tempTable[,c(5:12):=lapply(.SD,function(x){ifelse(x==-9999,NA,x)}), .SDcols=5:12]
tempTable[,c(5:12):=lapply(.SD,function(x){x/10}), .SDcols=5:12]
tempTable[,c(5:6):=lapply(.SD,function(x){x*(9/5)+32}), .SDcols=5:6]
weatherData <- rbind(weatherData,tempTable)
}
weatherData <- weatherData %>%
filter(datetime >= as.Date(date1) & datetime < (as.Date(date2)+1))
if(Interp){
cols<-c('Temperature','Dew_Point_Temperature','Sea_Level_Pressure','Wind_Speed')
for(col in cols){
weatherData[col] <-na.approx(weatherData[col])
}
}
weatherData$datetime <- with_tz(weatherData$datetime, tz="US/Pacific")
return(weatherData)
}
getWeatherData('2019-01-01','2019-01-07')
library(tidyverse)
library(data.table)
library(lubridate)
library(dplyr)
library(timeDate)
library(RCurl)
library(zoo)
sessionInfo()
devtools::document()
devtools::install_github("matthewhamlin/rSCL")
library(rSCL)
getWeatherData('2019-01-01','2019-01-02')
library(tidyverse)
library(data.table)
library(lubridate)
library(dplyr)
library(timeDate)
library(RCurl)
library(zoo)
getWeatherData('2019-01-01','2019-01-02')
devtools::document()
devtools::install_github("matthewhamlin/rSCL")
library(rSCL)
getWeatherData('2019-01-01','2019-01-02')
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(data.table)
library(lubridate)
library(dplyr)
library(timeDate)
library(RCurl)
library(zoo)
library(rSCL)
getWeatherData('2019-01-01','2019-01-02')
